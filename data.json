Which Approach Should You Choose?

Here's a breakdown based on typical scenarios:

Use a Library IF:

All clients are Java-based and within the same organization or environment.
Performance is absolutely critical and network overhead is unacceptable.
Clients need very tight control over the merging process and require extensive customization capabilities.
Simplicity and tight coupling isn't a big concern.
You don't have to maintain a server.
You are okay with limited scalability.
Use an API IF:

Clients may use different technologies (cross-platform requirements).
You need centralized control, scalability, and maintainability of the document merging functionality.
Security and authorization are important.
Decoupling is important, and you prefer to hide implementation details.
You have the resources to deploy and maintain a server or containerized environment.
You want better control over versioning of the merge logic.
Considerations for your Situation

Types of Documents: If the documents are small or large files, what format are they in? If documents are very large, using an API with streaming might be optimal.
Security Requirements: Are the documents sensitive or require special access? An API allows you to manage security at the endpoint.
Performance Expectations: How quickly does the merging need to happen?
Future Needs: Do you foresee the need to add more features, change merging logic or integrate with other systems? An API will better accommodate this.
Team Skills: What are the skills of your team? Are they more comfortable with building libraries or deploying services?
Recommendations

For most general cases, building an API is usually the more robust and maintainable solution, especially if you are using spring boot. It provides flexibility, scalability, and centralized control. This comes at the cost of extra setup and network overhead, which may be fine in your case. If you must have very tight coupling and high performance and can guarantee your client environment, then a library is your go-to