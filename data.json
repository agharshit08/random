<dependencies>
    <!-- PDFBox for PDF handling -->
    <dependency>
        <groupId>org.apache.pdfbox</groupId>
        <artifactId>pdfbox</artifactId>
        <version>2.0.29</version>
    </dependency>

    <!-- Apache POI for handling DOC and DOCX files -->
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-ooxml</artifactId>
        <version>5.2.3</version>
    </dependency>

    <!-- Base64 decoding -->
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-codec</artifactId>
        <version>1.15</version>
    </dependency>
</dependencies>


import org.apache.pdfbox.multipdf.PDFMergerUtility;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.converter.PdfConverter;
import org.apache.poi.xwpf.converter.pdf.PdfOptions;
import org.apache.poi.xwpf.converter.pdf.PdfConverter as XWPFConverter;
import org.apache.commons.codec.binary.Base64;

import java.io.*;
import java.util.List;

class Document {
    private String docType; // "PDF" or "DOC"
    private String content; // Base64 encoded content

    // Getters and setters
    public String getDocType() { return docType; }
    public String getContent() { return content; }
}

public class DocumentMerger {
    public static void mergeDocuments(List<Document> documents, String outputFilePath) throws IOException {
        PDFMergerUtility pdfMerger = new PDFMergerUtility();
        
        for (Document doc : documents) {
            byte[] decodedBytes = Base64.decodeBase64(doc.getContent());
            File tempPdf = convertToPdf(decodedBytes, doc.getDocType());
            if (tempPdf != null) {
                pdfMerger.addSource(tempPdf);
            }
        }

        pdfMerger.setDestinationFileName(outputFilePath);
        pdfMerger.mergeDocuments(null);

        System.out.println("Merged PDF created: " + outputFilePath);
    }

    private static File convertToPdf(byte[] fileBytes, String docType) throws IOException {
        File tempFile = File.createTempFile("temp", ".pdf");
        
        if ("PDF".equalsIgnoreCase(docType)) {
            try (FileOutputStream fos = new FileOutputStream(tempFile)) {
                fos.write(fileBytes);
            }
        } else if ("DOC".equalsIgnoreCase(docType)) {
            InputStream is = new ByteArrayInputStream(fileBytes);
            FileOutputStream fos = new FileOutputStream(tempFile);
            
            if (isDocx(fileBytes)) {
                // Convert DOCX to PDF
                XWPFDocument document = new XWPFDocument(is);
                PdfOptions options = PdfOptions.create();
                XWPFConverter.getInstance().convert(document, fos, options);
            } else {
                // Convert DOC to PDF
                HWPFDocument document = new HWPFDocument(is);
                PdfConverter.getInstance().convert(document, fos);
            }

            fos.close();
            is.close();
        }

        return tempFile;
    }

    private static boolean isDocx(byte[] data) {
        return data.length > 4 && data[0] == 'P' && data[1] == 'K';
    }

    public static void main(String[] args) throws IOException {
        // Example usage
        List<Document> documents = List.of(
            new Document("PDF", "BASE64_ENCODED_PDF_CONTENT"),
            new Document("DOC", "BASE64_ENCODED_DOC_CONTENT")
        );

        mergeDocuments(documents, "merged_output.pdf");
    }
}
