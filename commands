import com.itextpdf.kernel.pdf.*;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.*;
import org.apache.poi.xwpf.usermodel.*;
import org.springframework.stereotype.Service;
import java.io.*;
import java.util.List;

@Service
public class DocxToPdfService {

    public byte[] convertDocxToPdf(byte[] docxContent) throws IOException {
        // Load DOCX from byte[]
        ByteArrayInputStream docxInputStream = new ByteArrayInputStream(docxContent);
        XWPFDocument document = new XWPFDocument(docxInputStream);

        // Create PDF in-memory
        ByteArrayOutputStream pdfOutputStream = new ByteArrayOutputStream();
        PdfWriter writer = new PdfWriter(pdfOutputStream);
        PdfDocument pdf = new PdfDocument(writer);
        Document pdfDocument = new Document(pdf);

        // Process paragraphs and tables
        for (IBodyElement element : document.getBodyElements()) {
            if (element instanceof XWPFParagraph) {
                XWPFParagraph paragraph = (XWPFParagraph) element;
                pdfDocument.add(new Paragraph(paragraph.getText()));
            } else if (element instanceof XWPFTable) {
                pdfDocument.add(convertTable((XWPFTable) element));
            }
        }

        // Close resources
        pdfDocument.close();
        document.close();

        return pdfOutputStream.toByteArray();
    }

    private Table convertTable(XWPFTable table) {
        List<XWPFTableRow> rows = table.getRows();
        int numCols = rows.get(0).getTableCells().size();
        Table pdfTable = new Table(numCols);

        for (XWPFTableRow row : rows) {
            for (XWPFTableCell cell : row.getTableCells()) {
                pdfTable.addCell(new Cell().add(new Paragraph(cell.getText())));
            }
        }

        return pdfTable;
    }
}
